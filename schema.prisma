// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum UserTitle {
  DEV
  FOUNDER
  DEVFOUNDER
}

model User {
  id            Int      @id @default(autoincrement())
  username      String   @unique
  name          String
  email         String   @unique
  title         UserTitle @default(DEV)
  specialty     String?
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")
  projects      Project[]
  following     User[]   @relation("UserFollows")
  followers     User[]   @relation("UserFollows")
  collaborations CollaboratorRequest[]
  @@map(name: "users")
}

model Project {
  id            Int       @id @default(autoincrement())
  title         String
  description   String
  name          String?
  styles        String?
  tools         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  author        User      @relation(fields: [authorId], references: [id])
  authorId      Int
  files         File[]
  collaborators CollaboratorRequest[]
  @@map(name: "projects")
}

model File {
  id        Int      @id @default(autoincrement())
  url       String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
  @@map(name: "files")
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model CollaboratorRequest {
  id          Int      @id @default(autoincrement())
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   Int
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  status      RequestStatus
  @@map(name: "collaborator_requests")
}
